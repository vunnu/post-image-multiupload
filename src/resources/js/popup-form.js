(function ($) {    var id_upld;    var img_ids = '';    var frame;    var popupImage = {        /**         * Handle a single selected image attachment         *         * @param attachment         */        updateImage: function (attachment) {            // the selected image            console.log(attachment);            var file = attachment.toJSON();            // get image sizes data            var sizes = attachment.get('sizes');            if(typeof sizes !== 'undefined')            {                var size = ( typeof sizes.thumbnail === 'undefined' ) ? sizes.full : sizes.thumbnail;                img_ids += file.id + ',';                //image.id                $('#' + id_upld).val(img_ids);                //sizes.thumbnail.url                $('.plupload-attach').append("<img width='150' height='150' class='taxonomy-term-image-attach' src='" + size.url + "' />");                frame.close();            }else{                img_ids += file.id + ',';                //image.id                $('#' + id_upld).val(img_ids);                $('.plupload-attach').append('' +                    '<div class="taxonomy-term-image-attach">'+                    '<span class="dashicons dashicons-media-document" style="font-size: 45px; display: block; float: left;"></span>'+                    '</div>'                );                frame.close();            }        },        /**         * Remove the current image by emptying the container and field         */        removeImage: function () {            $(this).parent().remove();            jQuery('.images_order').attr('name', 'images_order[]');        },        set: function (o) {            // merge in new option            $.extend(this, o);            // find input            this.$input = this.$el.find('input[type="hidden"]');            // return this for chaining            return this;        },        editImage: function () {            var _this = this;            var id = this.$input.val();            _this.file_frame = wp.media.frames.file_frame = wp.media(_this.settings);            // open            _this.file_frame.on('open', function () {                // set to browse                if (_this.file_frame.content._mode != 'browse') {                    _this.file_frame.content.mode('browse');                }                // add class                _this.file_frame.$el.closest('.media-modal').addClass('acf-media-modal acf-expanded');                // set selection                var selection = _this.file_frame.state().get('selection'),                    attachment = wp.media.attachment(id);                // to fetch or not to fetch                if ($.isEmptyObject(attachment.changed)) {                    attachment.fetch();                }                selection.add(attachment);            });            // close            _this.file_frame.on('close', function () {                // remove class                _this.file_frame.$el.closest('.media-modal').removeClass('acf-media-modal');            });            // Finally, open the modal            _this.file_frame.open();        },    }    // Build the choose from library frame.    $(document).on('click', '.modal-upload-btn', function (event) {        var $el = $(this);        event.preventDefault();        // If the media frame already exists, reopen it.        if ( frame ) {            frame.open();            return;        }        // Create the media frame.        frame = wp.media.frames.customHeader = wp.media({            // Set the title of the modal.            title: $el.data('choose'),            // Tell the modal to show only images.            library: {                type: 'image, application/pdf'            },            multiple: true,  // Set to true to allow multiple files to be selected            // Customize the submit button.            button: {                // Set the text of the button.                text: $el.data('update'),                // Tell the button not to close the modal, since we're                // going to refresh the page when the image is selected.                close: false            }        });        // When an image is selected, run a callback.        frame.on( 'select', function() {            frame.state()                .get('selection')                // handle each attachment                .map(popupImage.updateImage);        });        frame.on('open',function() {            var selection = frame.state().get('selection');            ids = jQuery('#'+ id_upld).val().split(',');            ids.forEach(function(id) {                attachment = wp.media.attachment(id);                attachment.fetch();                selection.add( attachment ? [ attachment ] : [] );            });        });        frame.open();    });    $(document).on('click', '.modal-edit-btn', function (e) {        e.preventDefault();        //alert('test');        popupImage.set({$el: $(this).closest('.thumb')}).editImage();        //acf.fields.image.set({ $el : $(this).closest('.acf-image-uploader') }).edit();    });    $(document).ready(function () {        id_upld = $('#pim_upload_id').val() ? $('#pim_upload_id').val() : 'pim_images';        $('.modal-remove-btn').click(popupImage.removeImage);    });})(jQuery);