(function ($) {    var id_upld = 'pim_images';    var img_ids = '';    var popupImageText = popupImageText || {};    var popupImage = {        // modal frame        file_frame: null,        $el: null,        $input: null,        o: {},        // modal settings        settings: {            title: popupImageText.modalTitle || 'Select or upload a video',            button: {                text: popupImageText.modalButton || 'Attach'            },            multiple: true,  // Set to true to allow multiple files to be selected            library: {                type: 'image'            }        },        /**         * Initialize script         */        init: function () {            var _this = this;            // delegate our click handler so that the image itself is clickable.  because that's cool            $('body').on('click', '.modal-upload-btn', function (event) {                event.preventDefault();                _this.openModal();            });            // remove button            $('.modal-remove-btn').click(_this.removeImage);            //edit            $(document).on('click', '.modal-edit-btn', function (e) {                e.preventDefault();                //alert('test');                popupImage.set({$el: $(this).closest('.thumb')}).editImage();                //acf.fields.image.set({ $el : $(this).closest('.acf-image-uploader') }).edit();            });        },        set: function (o) {            // merge in new option            $.extend(this, o);            // find input            this.$input = this.$el.find('input[type="hidden"]');            // return this for chaining            return this;        },        editImage: function () {            var _this = this;            var id = this.$input.val();            _this.file_frame = wp.media.frames.file_frame = wp.media(_this.settings);            // open            _this.file_frame.on('open', function () {                // set to browse                if (_this.file_frame.content._mode != 'browse') {                    _this.file_frame.content.mode('browse');                }                // add class                _this.file_frame.$el.closest('.media-modal').addClass('acf-media-modal acf-expanded');                // set selection                var selection = _this.file_frame.state().get('selection'),                    attachment = wp.media.attachment(id);                // to fetch or not to fetch                if ($.isEmptyObject(attachment.changed)) {                    attachment.fetch();                }                selection.add(attachment);            });            // close            _this.file_frame.on('close', function () {                // remove class                _this.file_frame.$el.closest('.media-modal').removeClass('acf-media-modal');            });            // Finally, open the modal            _this.file_frame.open();        },        /**         * Remove the current image by emptying the container and field         */        removeImage: function () {            $(this).parent().remove();            jQuery('.images_order').attr('name', 'images_order[]');        },        /**         * Open the media modal window         * - http://mikejolley.com/2012/12/using-the-new-wordpress-3-5-media-uploader-in-plugins/         * - https://gist.github.com/pippinsplugins/29bebb740e09e395dc06         */        openModal: function () {            var _this = this;            // If the media frame already exists, reopen it.            if (_this.file_frame && _this.file_frame.content._mode != 'browse') {                _this.file_frame.open();                return;            }            // Create the media frame.            _this.file_frame = wp.media.frames.file_frame = wp.media(_this.settings);            // When an image is selected, run a callback.            _this.file_frame.on('select', function () {                _this.file_frame.state()                    .get('selection')                    // handle each attachment                    .map(_this.updateImage);            });            // Finally, open the modal            _this.file_frame.open();        },        /**         * Handle a single selected image attachment         *         * @param attachment         */        updateImage: function (attachment) {            // the selected image            var image = attachment.toJSON();            console.log('Images');            console.log(image);            // get image sizes data            var sizes = attachment.get('sizes');            var size = ( typeof sizes.thumbnail === 'undefined' ) ? sizes.full : sizes.thumbnail;            img_ids += image.id + ',';            //image.id            $('#' + id_upld).val(img_ids);            //sizes.thumbnail.url            $('.plupload-attach').append("<img class='taxonomy-term-image-attach' src='" + size.url + "' />");        }    };    $(document).ready(function () {        popupImage.init();    });})(jQuery);